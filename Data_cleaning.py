#!/usr/bin/env python
# coding: utf-8

# In[23]:


import pandas as pd

#Reading raw survey data and Data Generated by Google API calls
raw=pd.read_csv('raw_data.csv')
API=pd.read_csv('API CALLS.csv')

model=pd.DataFrame()

#Copying required API CALL data into raw data
for index, x in raw.iterrows():
    id_value = x['id']
    if id_value in API['id'].values:
        raw.loc[index, 'IVTT_BUS'] = API.loc[API['id'] == id_value, 'computed_directions_bus_ivtt'].iloc[0]
        raw.loc[index, 'OVTT_BUS'] = API.loc[API['id'] == id_value, 'computed_directions_bus_ovtt'].iloc[0]
        raw.loc[index, 'TRANSFERS'] = API.loc[API['id'] == id_value, 'computed_directions_bus_transfers'].iloc[0]
    else:
        raw=raw.drop(index)
        

#Dropping some unnecessary columns
raw=raw.drop(['B_rt_dest_street_lat','B_rt_dest_street_long'],axis=1)
raw=raw.drop(['B_rt_origin_street_lat','B_rt_origin_street_long'],axis=1)
raw=raw.drop(['B_rt_days_per_week_travelled'],axis=1)


#Creating a column WORK to indicate trip purpose
raw['WORK']=" "
for ind in raw.index:
    
    if raw['B_rt_purpose'][ind]==1:
        raw.loc[ind,'WORK']=1
    else:
        raw.loc[ind,'WORK']=0
        

#Dropping INVALID crowding values from the data frame 
for ind in raw.index:
    if raw['D_bus_crowding_level'][ind]<0 or raw['D_bus_crowding_level'][ind]==1000:
        raw=raw.drop(ind)
        

#Creating a new columns and renaming few columns
raw.rename(columns = {'D_bus_crowding_level':'CROWDING'}, inplace = True)
raw.rename(columns={'computed_o_d_tt_train':'TT_TRAIN'},inplace=True)


#Dropping unnecessary columns
raw=raw.drop(['B_rt_pm_usage','B_pm_one_way_travel_cost','computed_o_d_travel_cost_taxi'],axis=1)
raw=raw.drop(['computed_o_d_tt_walking','computed_o_d_travel_cost_chosen_mode','computed_o_d_travel_cost_auto'],axis=1)
raw=raw.drop(['computed_o_d_travel_cost_rh_car','computed_o_d_travel_cost_rh_tw','computed_o_d_distance_driving'],axis=1)
raw=raw.drop(['computed_o_d_distance_bus','computed_o_d_distance_train','computed_o_d_tt_bus'],axis=1)


#Renaming few columns
raw.rename(columns={'computed_o_d_tt_train':'TT_TRAIN'},inplace=True)
raw.rename(columns={'computed_o_d_tt_driving':'TT_DRIVE'},inplace=True)
raw.rename(columns={'computed_o_d_travel_cost_train':'COST_TRAIN'},inplace=True)
raw.rename(columns={'computed_o_d_travel_cost_bus':'COST_BUS'},inplace=True)
raw.rename(columns={'computed_o_d_travel_cost_own_car':'COST_CAR'},inplace=True)
raw.rename(columns={'computed_o_d_travel_cost_own_tw':'COST_TW'},inplace=True)

raw.to_csv('cleaned.csv')

#Working on RP Data


RP=pd.read_csv("Cleaned_SP.csv")
for ind in RP.index:
    if RP['B_rt_frequent_mode'][ind]!=1 and RP['B_rt_frequent_mode'][ind]!=2 and RP['B_rt_frequent_mode'][ind]!=4 and RP['B_rt_frequent_mode'][ind]!=9 :
        RP=RP.drop(ind) 

RP["CHALT"]=" "

for ind in RP.index:
    if RP['B_rt_frequent_mode'][ind]==9:
        RP['CHALT']=4
    elif RP['B_rt_frequent_mode'][ind]==4:
        RP['CHALT']=3
    elif RP['B_rt_frequent_mode'][ind]==1:
        RP['CHALT']=1
    else:
        RP['CHALT']=2
        
RP.drop(['B_rt_frequent_mode'],axis=1)

RP.dropna()  

#outputfile of RP data
RP.to_csv('RP_Data.csv')


SP=pd.read_csv("Raw_SP_Data.csv")

#Renaming columns
SP.rename(columns={'sp_1_mode_1_ivtt':'IVTT_BUS','sp_1_mode_1_ovtt':'OVTT_BUS'},inplace=True)

SP.rename(columns={'sp_1_mode_1_cost':'COST_BUS','sp_1_mode_1_transfers':'TRANSFERS'},inplace=True)


SP.rename(columns={'sp_1_mode_3_ivtt':'IVTT_METRO','sp_1_mode_1_crowding':'CROWDING'},inplace=True)
SP.rename(columns={'sp_1_mode_3_ovtt':'OVTT_METRO'},inplace=True)
SP.rename(columns={'sp_1_mode_3_cost':'COST_METRO'},inplace=True)


SP.rename(columns={'sp_1_mode_4_ivtt':'TT_DRIVE'},inplace=True)
SP.rename(columns={'sp_1_mode_4_cost':'COST_DRIVE'},inplace=True)

#Dropping some columns
SP=SP.drop(['sp_1_mode_3_crowding','sp_1_mode_1','sp_1_mode_4','sp_1_mode_3_transfers','sp_1_mode_3'],axis=1)

for ind in SP.index:
    if SP['sp_1_mode_3'][ind]=='Walk/ Cycle':
        SP=SP.drop(ind)

#output file of SP data
SP.to_csv('SP_data.csv')


